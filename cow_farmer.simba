{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '2'}

{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}
{$I WaspLib/osr/handlers/combathandler.simba}

{$DEFINE SCRIPT_GUI}


type
  ERSDoor = (
    FALADOR_COW_PEN_NORTH_GATE,
    LUMBRIDGE_EAST_CHICKEN_PEN_EAST_GATE
  );

  TRSDoor = record(TSRLBaseRecord) class var
    ClosedPoints: TPointArray;
    OpenPoints: TPointArray;
    ClosedUpText: String;
    OpenUpText: String;
    DoorColor: TCTS2Color;
    Colors: Array of TCTS2Color;
    DoorHeight: Int32;
  end;

  TDoorHandler = record(TSRLBaseRecord)
    RSW: TRSWalker;
  end;


function GetRSDoor(RSDoorEnum: ERSDoor): TRSDoor; static;
var
  RSDoor: TRSDoor;
begin
  case RSDoorEnum of
    FALADOR_COW_PEN_NORTH_GATE:
    begin
      RSDoor.DoorColor := CTS2(6387845, 10);
      RSDoor.Colors := [CTS2(6387845, 10), CTS2(2768199, 10)];
      RSDoor.DoorHeight := 2;
      RSDoor.ClosedPoints := [Point(7520, 3196), Point(7516, 3192)];
      RSDoor.OpenPoints := [Point(7516, 3192), Point(7512, 3188)];
      RSDoor.ClosedUpText := "Open Gate";
      RSDoor.OpenUpText := "Close Gate";
    end;
    LUMBRIDGE_EAST_CHICKEN_PEN_EAST_GATE:
    begin
      // TODO
    end;
  end;

  Exit(RSDoor);
end;


procedure TDoorHandler.Setup();
begin
  Self.Name := 'Door Handler';
  Self.RSW.Setup('world');
end;


procedure TDoorHandler.Setup(RSWalker: TRSWalker); overload;
begin
  Self.Name := 'Door Handler';
  Self.RSW := RSWalker;
end;


function TDoorHandler.GetDoorMSPos(RSDoor: TRSDoor; OpenPosition: Boolean): TPoint;
var
  Point1MSMean: TPoint;
  Point2MSMean: TPoint;
  DoorMS: TPoint;
begin
  if OpenPosition then
  begin
    Point1MSMean := Self.RSW.GetTileMS(RSDoor.OpenPoints[0], RSDoor.DoorHeight).Mean();
    Point2MSMean := Self.RSW.GetTileMS(RSDoor.OpenPoints[1], RSDoor.DoorHeight).Mean();
  end else
  begin
    Point1MSMean := Self.RSW.GetTileMS(RSDoor.ClosedPoints[0], RSDoor.DoorHeight).Mean();
    Point2MSMean := Self.RSW.GetTileMS(RSDoor.ClosedPoints[1], RSDoor.DoorHeight).Mean();
  end;
  DoorMS := Point(Round((Point1MSMean.X + Point2MSMean.X) / 2), Round((Point1MSMean.Y + Point2MSMean.Y) / 2));
  Exit(DoorMS);
end;


function TDoorHandler.Find(RSDoor: TRSDoor; OpenPosition: Boolean): Boolean;
  function GetObjPt: TPoint;
  var
    B: TBox;
    i: Int32;
    DoorMSPos: TPoint;
    ATPA: T2DPointArray;
    Finder: TRSObjectFinder;
  begin
    for i:=0 to High(RSDoor.Colors) do
      Finder.Colors += RSDoor.Colors[i];

    Finder.ClusterDistance := 10;

    DoorMSPos := Self.GetDoorMSPos(RSDoor, OpenPosition);
    B := Box(DoorMSPos.x - 10, DoorMSPos.y - 10, DoorMSPos.x + 10, DoorMSPos.y + 10);

    B.LimitTo(MainScreen.Bounds);
    if MainScreen.IsVisible(B.Middle()) then
    begin
      ATPA := MainScreen.FindObject(Finder, B);
      if (ATPA.Len > 0) then
        Result := ATPA.Biggest().Mean();
    end;
  end;

var
  Pt: TPoint;
begin
  Result := False;

  if Inventory.GetSelectedSlot >= 0 then
    ChooseOption.Select('Cancel');

  Pt := GetObjPt;
  if Pt.X<5 then Exit;

  Mouse.Move(Pt);
  if OpenPosition then Result := MainScreen.IsUpText(RSDoor.OpenUpText, 75)
  else Result := MainScreen.IsUpText(RSDoor.ClosedUpText, 75);
end;


function TDoorHandler.IsOpen(RSDoor: TRSDoor): Boolean;
begin
  Self.Find(RSDoor, True);
  if MainScreen.IsUpText(RSDoor.OpenUpText) then Exit(True);
end;


function TDoorHandler.IsClosed(RSDoor: TRSDoor): Boolean;
begin
  Self.Find(RSDoor, False);
  if MainScreen.IsUpText(RSDoor.ClosedUpText) then Exit(True);
end;


function TDoorHandler.Open(RSDoor: TRSDoor): Boolean;
begin
  Self.Find(RSDoor, False);

  if MainScreen.IsUpText(RSDoor.ClosedUpText) then
  begin
    Mouse.Click(MOUSE_LEFT);
    if Result := MainScreen.DidRedClick() then
      WaitUntil(not Self.IsClosed(RSDoor), 500, 3000);
    Exit(Result);
  end;
end;


function TDoorHandler.Close(RSDoor: TRSDoor): Boolean;
begin
  Self.Find(RSDoor, True);

  if MainScreen.IsUpText(RSDoor.OpenUpText) then
  begin
    Mouse.Click(MOUSE_LEFT);
    if Result := MainScreen.DidRedClick() then
      WaitUntil(not Self.IsOpen(RSDoor), 500, 3000);
    Exit(Result);
  end;
end;


// by Rasta Magician, veteran SRL-er
function ProgReport(
                           ResultType:int32; ScriptName, ScriptAuthor, ScriptVersion: String;
                           VarNames: TStringArray;
                           VarValues: TVariantArray
                          ): Variant;
var
  TSA        : TStringArray;
  s,s2       : String;
  s3         : String := '=';
  s4         : String := ' ';
  i, i2, L   : Int32;
begin
  if (ResultType = 2) then
    Result := '';

  if length(VarNames) <> Length(VarValues) then
  begin
    Writeln('VarNames and VarValues must be the same length');
    exit;
  end;
  SetLength(TSA, 3 + Length(VarNames) + 4);
  s2 := 'by '+ScriptAuthor;

  TSA[0] := s3;
  TSA[1] := ScriptName.Capitalize+' '+ScriptVersion;
  TSA[2] := s2;
  TSA[3] := s3;

  i2 := 3 + Length(VarNames);

  for i:= 4 to i2 do
    L := Max(L, Length(VarNames[i-4]));

  for i:= 4 to i2 do
  begin
    s := VarValues[i-4];
    TSA[i] := Padr((VarNames[i-4]).Capitalize, L)+' : '+ s.Capitalize;
  end;

  TSA[i2+1] := s3;
  TSA[i2+2] := ScriptName.Capitalize+' '+ScriptVersion;
  TSA[i2+3] := s3;

  i2 := 0;
  for i:= 0 to High(TSA) do
    i2 := Max(i2, Length(TSA[i]));

  TSA[0]           := s3.Replicate(i2);
  TSA[3]           := s3.Replicate(i2);
  TSA[High(TSA)-2] := s3.Replicate(i2);
  TSA[High(TSA)]   := s3.Replicate(i2);

  TSA[2] := s4.Replicate(round((i2 - Length(TSA[2]))/2)) + TSA[2]; //centering by ScriptAuthor
  TSA[High(TSA)-1] := s4.Replicate(round((i2 - Length(TSA[High(TSA)-1]))/2)) + TSA[High(TSA)-1];

  for i:= 0 to High(TSA) do
    if (TSA[i][1] = s3) then
      case ResultType of
        0 : writeln     ('[='+Padr(TSA[i], i2)+'=]');
        1 : writeln     ('[='+Padr(TSA[i], i2)+'=]');
        2 : Result := Result + '[='+Padr(TSA[i], i2)+'=]' + chr(13);
        else begin Writeln('Invalid Result Type'); exit; end;
      end
    else
      case ResultType of
        0 : writeln     ('[ '+Padr(TSA[i], i2)+' ]');
        1 : writeln     ('[ '+Padr(TSA[i], i2)+' ]');
        2 : Result := Result + '[ '+Padr(TSA[i], i2)+' ]' + chr(13);
        else begin Writeln('Invalid Result Type'); exit; end;
      end;

  if not ResultType = 2 then Result := true;
end;




type
  ECowFarmerState = (
    ATTACK_COW,
    COW_COMBAT,
    PICK_UP,
    OUT_OF_PEN,
    WALK_TO_BANK,
    BANK_HIDES,
    WALK_TO_PEN,
    LOST
  );

  TCowFarmer = record(TBaseBankScript)
    State: ECowFarmerState;
    SeenXPOnAttack: Boolean;
    DoorHandler: TDoorHandler;
    NorthGate: TRSDoor;
    BankBox: TBox;
    PenBox: TBox;
    InsideGatePos: TPoint;
    OutsideGatePos: TPoint;
    CenterPenPos: TPoint;
    PathToBank: TPointArray;
    PathToPen: TPointArray;
    CowsKilled: Int32;
    Cowhide: TRSItem;
    HideCount: Int32;
    CustomBank: TRSObject;
    CowhideColor: TCTS2Color;
    LostCount: Int32;
    Version: String;
  end;

procedure TAntiban.Setup(); override;
begin
  Self.MinZoom := 20;
  Self.MaxZoom := 35;
  Self.AdjustZoom();

  Self.Skills := [
    ERSSkill.HITPOINTS,
    ERSSkill.ATTACK,
    ERSSkill.STRENGTH,
    ERSSkill.DEFENCE,
    ERSSkill.PRAYER,
    ERSSkill.TOTAL
  ];

  inherited;
end;

function TCowFarmer.GetCustomCow(): TRSMonster;
var
  CustomCow: TRSMonster;
begin
  CustomCow.Setup(55, 4, [[PenBox.x1 + 16, PenBox.y1 + 16], [PenBox.x2 - 12, PenBox.y2 - 12], [PenBox.x1 - 12, PenBox.y1 + 12], [PenBox.x2 + 12, PenBox.y2 - 12]]);
  CustomCow.Setup('Cow');
  CustomCow.UpText += 'Cow calf';
  CustomCow.Finder.Colors += CTS2(1452592, 10);
  CustomCow.Finder.Colors += CTS2(5463667, 10);
  CustomCow.Finder.Colors += CTS2(5529974, 10);
  CustomCow.Finder.Colors += CTS2(13092814, 10);
  CustomCow.Finder.Colors += CTS2(5005930, 10);
  Result := CustomCow;
end;

function TCowFarmer.GetCustomBank(): TRSObject;
var
  CustomBank: TRSObject;
begin
  CustomBank.Setup(7, [[7432, 3032], [7436, 3032], [7440, 3032], [7444, 3032], [7448, 3032], [7452, 3032]]);
  CustomBank.Setup(['ank b', 'k booth']);
  CustomBank.Finder.Colors += CTS2(3099996, 17, 0.12, 0.59);
  CustomBank.Finder.Colors += CTS2(4086642, 5, 0.08, 0.55);
  Result := CustomBank;
end;

procedure TCowFarmer.Init(maxActions: Int32; maxTime: Int64); override;
begin
  inherited;

  Self.RSW.Setup('world');

  Self.BankBox := Box(7420, 3012, 7460, 3028);
  Self.PenBox := Box(7476, 3196, 7564, 3260);
  Self.OutsideGatePos := Point(7520, 3192);
  Self.InsideGatePos := Point(7520, 3196);
  Self.CenterPenPos := Point(7516, 3220);
  Self.PathToBank := [Point(7492, 3176), Point(7448, 3172), Point(7424, 3160), Point(7420, 3100), Point(7420, 3012), Point(7440, 3012), Point(7440, 3024)];
  Self.PathToPen := [Point(7440, 3024), Point(7440, 3012), Point(7420, 3012), Point(7420, 3100), Point(7424, 3160), Point(7448, 3172), Point(7492, 3176)];

  Self.DoorHandler.Setup(Self.RSW);
  Self.NorthGate := GetRSDoor(FALADOR_COW_PEN_NORTH_GATE);

  Self.Cowhide := 'Cowhide';
  Self.CustomBank := Self.GetCustomBank();

  Self.CowhideColor := CTS2(13092814, 10);

  Self.LostCount := 0;

  Self.Version := 'Rev ' + {$MACRO SCRIPT_REVISION};

  CombatHandler.Setup(True, Self.GetCustomCow(), 10, 2000);
  Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_LEFT_CLICK);
  Combat.SetAutoRetaliate(True);
end;

procedure TCowFarmer.AttackCow();
begin
  if CombatHandler.AttackMonster() then
  begin
    Self.State := COW_COMBAT;
    Self.SeenXPOnAttack := False;
  end;
end;

procedure TCowFarmer.HandleInCombat();
var
  slots: TIntegerArray;
begin
  if Antiban.BioDice() then
    Self.RSW.CheckRunEnergy();
  if Antiban.BioDice() and Inventory.FindItems(REMAINS, slots) then
    Self.HandleBones();
  WaitUntil(not Self.InCombat(), 500, 1000);
end;

procedure TCowFarmer.Loot();
var
  MyPos: TPoint;
  SearchBox: TBox;
  CowhidePoints: TPointArray;
  MaxChecks: Int32 := 4;
  Index: Int32 := 0;
  FoundLoot: Boolean := True;
  UpText: String;
  NextPointCheck: TPoint;
  NumEmptySlots: Int32;
begin
  while FoundLoot do
  begin
    FoundLoot := False;
    MyPos := Self.RSW.GetMyTileMS();
    SearchBox := Box(MyPos.x - 40, MyPos.y - 40, MyPos.x + 40, MyPos.y + 40);
    // TODO: Do something like search for a group of pixels, beef getting in the way...
    // TODO: Remove pixels that are too close together
    SRL.FindColors(CowhidePoints, Self.CowhideColor, SearchBox);
    while (Index < Length(CowhidePoints)) and (Index < MaxChecks) and not FoundLoot do
    begin
      NextPointCheck := CowhidePoints.RandomValue();
      Mouse.Move(NextPointCheck);
      CowhidePoints.Remove(NextPointCheck);
      UpText := MainScreen.GetUpText();
      if UpText.StartsWith('Take') and not UpText.Contains('beef') then
      begin
        FoundLoot := True;
        // TODO: Why does this right click and not pick up anything?
        // When it right clicks and sees good loot text it returns true, but doesn't click anything
        NumEmptySlots := Inventory.CountEmptySlots();
        CombatHandler.LootHandler.HandleLooting();
        WaitUntil(Inventory.CountEmptySlots() < NumEmptySlots, 300, 3000);
        CombatHandler.LootHandler.CheckLoot(Self.RSW.GetMyTileMS());
      end;
      Index := Index + 1;
    end;
  end;
end;

procedure TCowFarmer.HandleBones();
var
  Done: Boolean;
begin
  while not Done do Done := not CombatHandler.DoBuryBones();
end;

procedure TCowFarmer.EnterPen();
begin
  Self.RSW.WalkPath([Self.OutsideGatePos], 5);
  Minimap.WaitMoving(False);
  if not Self.DoorHandler.IsOpen(Self.NorthGate) then
  begin
    if not Self.DoorHandler.Open(Self.NorthGate) then
    begin
      Antiban.RandomRotate();
      Exit;
    end;
  end;
  Self.RSW.WalkPath([Self.CenterPenPos], 2);
  Minimap.WaitMoving(False);
end;

procedure TCowFarmer.ExitPen();
begin
  Self.RSW.WalkPath([Self.InsideGatePos], 5);
  Minimap.WaitMoving(False);
  if not Self.DoorHandler.IsOpen(Self.NorthGate) then
  begin
    if not Self.DoorHandler.Open(Self.NorthGate) then
    begin
      Antiban.RandomRotate();
      Exit;
    end;
  end;
  Self.RSW.WalkPath([Self.PathToBank[0]]);
  Minimap.WaitMoving(False);
end;

procedure TCowFarmer.WalkToBank();
begin
  while Self.RSW.GetMyPos().InBox(Self.PenBox) do Self.ExitPen();
  Self.RSW.WalkPath(Self.PathToBank);
end;

procedure TCowFarmer.WalkToPen();
begin
  RSW.WalkPath(Self.PathToPen);
  while not Self.RSW.GetMyPos().InBox(Self.PenBox) do Self.EnterPen();
end;

procedure TCowFarmer.BankHides();
var
  InventoryHideCount: Int32;
begin
  if Bank.Hover(Self.CustomBank) then
  begin
    if Bank.WalkOpen(Self.CustomBank) then
    begin
      InventoryHideCount := Inventory.CountItem(Self.Cowhide);
      if Bank.DepositAll() then
      begin
        Self.HideCount := Self.HideCount + InventoryHideCount;

        Self.Report();

        Self.State := WALK_TO_PEN;
        WaitUntil(Inventory.Count() = 0, 100, 1000);
        Bank.Close(AntiBan.BioDice());
      end;
    end;
  end;
end;

procedure TCowFarmer.Report();
var
  RunTime: Int64;
  SArr: TStringArray;
  VArr: TVariantArray;
begin
  RunTime  := Self.TimeRunning.ElapsedTime();

  SArr := ['Runtime','Hides Banked', 'Cows Killed'];
  VArr := [SRL.MsToTime(GetTimeRunning, Time_Short),
           ToStr(Self.HideCount),
           ToStr(Self.CowsKilled)];

  ProgReport(1, 'Cow Farmer','Mikulas', Self.Version, SArr, VArr);
end;

procedure TCowFarmer.HandleLost();
var
  MyPos: TPoint;
  DistanceToBank: Double;
  DistanceToPen: Double;
begin
  Self.LostCount := Self.LostCount + 1;
  MyPos := Self.RSW.GetMyPos();
  DistanceToBank := MyPos.DistanceTo(Self.PathToBank[Length(Self.PathToBank) - 1]);
  DistanceToPen := MyPos.DistanceTo(Self.CenterPenPos);
  if DistanceToPen > DistanceToBank then Self.RSW.WalkPath([Self.PathToBank[Length(Self.PathToBank) - 1]])
  else Self.EnterPen();
end;

function TCowFarmer.InCombat(): Boolean;
begin
  if not Self.SeenXPOnAttack then Self.SeenXPOnAttack := MainScreen.FindHitsplats() <> [];
  Result := MainScreen.InCombat();
end;

function TCowFarmer.GetState(): ECowFarmerState;
var
  PlayerPos: TPoint;
  InventoryIsFull: Boolean;
begin
  PlayerPos := Self.RSW.GetMyPos();
  InventoryisFull := Inventory.IsFull();

  if InventoryIsFull and PlayerPos.InBox(Self.PenBox) then Exit(WALK_TO_BANK);
  if InventoryIsFull and PlayerPos.InBox(Self.BankBox) then Exit(BANK_HIDES);
  if not InventoryIsFull and PlayerPos.InBox(Self.BankBox) then Exit(WALK_TO_PEN);

  if (Self.State = COW_COMBAT) and Self.InCombat() then Exit(COW_COMBAT);

  if not InventoryIsFull and PlayerPos.InBox(Self.PenBox) then
  begin
    if Self.SeenXPOnAttack then
    begin
      Self.CowsKilled := Self.CowsKilled + 1;
      Self.SeenXPOnAttack := False;
      Exit(PICK_UP);
    end;

    Exit(ATTACK_COW);
  end;

  Exit(LOST);
end;

procedure TCowFarmer.Run();
var
  OldState: ECowFarmerState;
begin
  Writeln(Self.RSW.GetMyPos);

  repeat
    if Inventory.IsFull() then Self.HandleBones();

    Self.State := Self.GetState();
    if not (Self.State = OldState) then
    begin
      Writeln Self.State;
      Self.DoAntiban();
    end;
    OldState := Self.State;
    case Self.State of
      ATTACK_COW: Self.AttackCow();
      COW_COMBAT: Self.HandleInCombat();
      PICK_UP: Self.Loot();
      OUT_OF_PEN: Self.EnterPen();
      WALK_TO_BANK: Self.WalkToBank();
      BANK_HIDES: Self.BankHides();
      WALK_TO_PEN: Self.WalkToPen();
      LOST: Self.HandleLost();
    end;
  until Self.ShouldStop();

  Writeln(Self.BuildTextReport);
end;


{$IFDEF SCRIPT_GUI}
type
  TCowFarmerConfig = record(TScriptForm)
  SomeSelector: TLabeledCombobox;
  end;

procedure TCowFarmerConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Setup('Cow Farmer');
  Self.Start.setOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateAccountManager(tab);

  Self.CreateVersionPanel(tab);
  Self.CreateAntibanManager();
  Self.CreateWaspLibSettings();
  Self.CreateAPISettings();

  inherited;
end;
{$ENDIF}



var
  CowFarmer: TCowFarmer;
{$IFDEF SCRIPT_GUI}
  CowFarmerConfig: TCowFarmerConfig
{$ENDIF}
begin
  {$IFDEF SCRIPT_GUI}
  CowFarmerConfig.Run();
  {$ENDIF}
  CowFarmer.Init(WLSettings.MaxActions, WLSettings.MaxTime);

  CowFarmer.Run();
end;








function TRSWalker.GetMyTileMS(): TPoint;
var
  MyPos: TPoint;
begin
  MyPos := Self.GetMyPos();
  Exit(Self.GetTileMSEx(MyPos, MyPos).Mean());
end;

function MonsterData.GetDrops(monster: String): TRSMonsterDropArray; static; override;
var
  JSONArray: TJSONArray;
  i: Int32;
  drop: TRSMonsterDrop;
begin
  WriteLn('Loading ' + Monster + ' drops, this might take up to a 1 minute.');

  JSONArray := MonsterData.GetJSONArray(Monster, 'drops');

  for i := 0 to JSONArray.length() - 1 do
  begin
    drop := [];
    drop := MonsterData.GetDrop(JSONArray.getJSONObject(i));
    if drop.Item = 'raw beef' then continue;

    if not drop.Stackable then
    begin
      drop.Stackable := drop.ID.ContainsAny(['995', '996', '997', '998', '999', '1000', '1001', '1002', '1003', '1004']) or
                        ItemData.GetOSRSBoxBoolean(drop.ID, 'stackable');
    end;

    Result += Drop;
  end;
end;

function TRSMMDot._HoverHelper(Attempts: Int32): Boolean; override;
var
  Attempt: Int32;
  ATPA: T2DPointArray;
  Points: TPointArray;
  CompassAngle: Double;
begin
  if (RSClient.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface then
    Exit(False);

  if Filter.UpText and MainScreen.IsUpText(UpText) then
    Exit(True);

  if Filter.MinimapDot and (Minimap.GetDots(DotType) = []) then
    Exit;

  for Attempt := 0 to Attempts do
  begin
    if Self.Find(ATPA) then
    begin
      if Attempt < 2 then
        Points := ATPA[0] // 0 for the closest one.
      else if Length(ATPA) > (Attempt - 2) then
        Points := ATPA[Attempt - 2]
      else
        Points := ATPA[Random(0, High(ATPA))];

      if Points <> [] then
      begin
        if DotType = ERSMinimapDot.ITEM then
          Mouse.Move(Points.Mean)
        else
          Mouse.Move(Points[Random(0, High(Points))]);
        if not Filter.UpText then
          Exit(True);
      end;
    end;

    if MainScreen.IsUpText(UpText) then
      Exit(True);

    //will rotate the screen for the last attempt if hasn't hovered properly yet
    if (DotType <> ERSMinimapDot.ITEM) and (Attempt = (Attempts - 1)) then
    begin
      CompassAngle := Minimap.GetCompassAngle + Random(-50, 50);
      Minimap.SetCompassAngle(CompassAngle, 10);
    end;
  end;
end;

